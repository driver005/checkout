/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatabaseDeletedAt from './DatabaseDeletedAt';
import DisputeReason from './DisputeReason';
import DisputeStatus from './DisputeStatus';

/**
 * The DisputeDispute model module.
 * @module model/DisputeDispute
 * @version 2.0
 */
class DisputeDispute {
    /**
     * Constructs a new <code>DisputeDispute</code>.
     * @alias module:model/DisputeDispute
     */
    constructor() { 
        
        DisputeDispute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DisputeDispute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisputeDispute} obj Optional instance to populate.
     * @return {module:model/DisputeDispute} The populated <code>DisputeDispute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisputeDispute();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('balance_transactions')) {
                obj['balance_transactions'] = ApiClient.convertToType(data['balance_transactions'], ['String']);
            }
            if (data.hasOwnProperty('charge')) {
                obj['charge'] = ApiClient.convertToType(data['charge'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = DatabaseDeletedAt.constructFromObject(data['deleted_at']);
            }
            if (data.hasOwnProperty('evidence')) {
                obj['evidence'] = ApiClient.convertToType(data['evidence'], 'String');
            }
            if (data.hasOwnProperty('evidence_details')) {
                obj['evidence_details'] = ApiClient.convertToType(data['evidence_details'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_charge_refundable')) {
                obj['is_charge_refundable'] = ApiClient.convertToType(data['is_charge_refundable'], 'Boolean');
            }
            if (data.hasOwnProperty('livemode')) {
                obj['livemode'] = ApiClient.convertToType(data['livemode'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('payment_intent')) {
                obj['payment_intent'] = ApiClient.convertToType(data['payment_intent'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], DisputeReason);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], DisputeStatus);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisputeDispute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisputeDispute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['balance_transactions'])) {
            throw new Error("Expected the field `balance_transactions` to be an array in the JSON data but got " + data['balance_transactions']);
        }
        // ensure the json data is a string
        if (data['charge'] && !(typeof data['charge'] === 'string' || data['charge'] instanceof String)) {
            throw new Error("Expected the field `charge` to be a primitive type in the JSON string but got " + data['charge']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `deleted_at`
        if (data['deleted_at']) { // data not null
          DatabaseDeletedAt.validateJSON(data['deleted_at']);
        }
        // ensure the json data is a string
        if (data['evidence'] && !(typeof data['evidence'] === 'string' || data['evidence'] instanceof String)) {
            throw new Error("Expected the field `evidence` to be a primitive type in the JSON string but got " + data['evidence']);
        }
        // ensure the json data is a string
        if (data['evidence_details'] && !(typeof data['evidence_details'] === 'string' || data['evidence_details'] instanceof String)) {
            throw new Error("Expected the field `evidence_details` to be a primitive type in the JSON string but got " + data['evidence_details']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['payment_intent'] && !(typeof data['payment_intent'] === 'string' || data['payment_intent'] instanceof String)) {
            throw new Error("Expected the field `payment_intent` to be a primitive type in the JSON string but got " + data['payment_intent']);
        }
        // validate the optional field `reason`
        if (data['reason']) { // data not null
          DisputeReason.validateJSON(data['reason']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          DisputeStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
 * @member {Number} amount
 */
DisputeDispute.prototype['amount'] = undefined;

/**
 * List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
 * @member {Array.<String>} balance_transactions
 */
DisputeDispute.prototype['balance_transactions'] = undefined;

/**
 * @member {String} charge
 */
DisputeDispute.prototype['charge'] = undefined;

/**
 * @member {String} created_at
 */
DisputeDispute.prototype['created_at'] = undefined;

/**
 * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
 * @member {String} currency
 */
DisputeDispute.prototype['currency'] = undefined;

/**
 * @member {module:model/DatabaseDeletedAt} deleted_at
 */
DisputeDispute.prototype['deleted_at'] = undefined;

/**
 * @member {String} evidence
 */
DisputeDispute.prototype['evidence'] = undefined;

/**
 * @member {String} evidence_details
 */
DisputeDispute.prototype['evidence_details'] = undefined;

/**
 * @member {String} id
 */
DisputeDispute.prototype['id'] = undefined;

/**
 * If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
 * @member {Boolean} is_charge_refundable
 */
DisputeDispute.prototype['is_charge_refundable'] = undefined;

/**
 * @member {Boolean} livemode
 */
DisputeDispute.prototype['livemode'] = undefined;

/**
 * @member {Object} metadata
 */
DisputeDispute.prototype['metadata'] = undefined;

/**
 * @member {String} object
 */
DisputeDispute.prototype['object'] = undefined;

/**
 * @member {String} payment_intent
 */
DisputeDispute.prototype['payment_intent'] = undefined;

/**
 * Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).
 * @member {module:model/DisputeReason} reason
 */
DisputeDispute.prototype['reason'] = undefined;

/**
 * Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.
 * @member {module:model/DisputeStatus} status
 */
DisputeDispute.prototype['status'] = undefined;

/**
 * @member {String} updated_at
 */
DisputeDispute.prototype['updated_at'] = undefined;






export default DisputeDispute;

