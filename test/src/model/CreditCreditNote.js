/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditType from './CreditType';
import DatabaseDeletedAt from './DatabaseDeletedAt';

/**
 * The CreditCreditNote model module.
 * @module model/CreditCreditNote
 * @version 2.0
 */
class CreditCreditNote {
    /**
     * Constructs a new <code>CreditCreditNote</code>.
     * @alias module:model/CreditCreditNote
     */
    constructor() { 
        
        CreditCreditNote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreditCreditNote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreditCreditNote} obj Optional instance to populate.
     * @return {module:model/CreditCreditNote} The populated <code>CreditCreditNote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreditCreditNote();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ApiClient.convertToType(data['customer'], 'String');
            }
            if (data.hasOwnProperty('customer_balance_transaction')) {
                obj['customer_balance_transaction'] = ApiClient.convertToType(data['customer_balance_transaction'], 'String');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = DatabaseDeletedAt.constructFromObject(data['deleted_at']);
            }
            if (data.hasOwnProperty('discount_amount')) {
                obj['discount_amount'] = ApiClient.convertToType(data['discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = ApiClient.convertToType(data['invoice'], 'String');
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], ['String']);
            }
            if (data.hasOwnProperty('livemode')) {
                obj['livemode'] = ApiClient.convertToType(data['livemode'], 'Boolean');
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('out_of_band_amount')) {
                obj['out_of_band_amount'] = ApiClient.convertToType(data['out_of_band_amount'], 'Number');
            }
            if (data.hasOwnProperty('pdf')) {
                obj['pdf'] = ApiClient.convertToType(data['pdf'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('refund')) {
                obj['refund'] = ApiClient.convertToType(data['refund'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subtotal')) {
                obj['subtotal'] = ApiClient.convertToType(data['subtotal'], 'Number');
            }
            if (data.hasOwnProperty('subtotal_excluding_tax')) {
                obj['subtotal_excluding_tax'] = ApiClient.convertToType(data['subtotal_excluding_tax'], 'Number');
            }
            if (data.hasOwnProperty('tax_amounts')) {
                obj['tax_amounts'] = ApiClient.convertToType(data['tax_amounts'], ['String']);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('total_excluding_tax')) {
                obj['total_excluding_tax'] = ApiClient.convertToType(data['total_excluding_tax'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], CreditType);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('voided_at')) {
                obj['voided_at'] = ApiClient.convertToType(data['voided_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreditCreditNote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreditCreditNote</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['customer'] && !(typeof data['customer'] === 'string' || data['customer'] instanceof String)) {
            throw new Error("Expected the field `customer` to be a primitive type in the JSON string but got " + data['customer']);
        }
        // ensure the json data is a string
        if (data['customer_balance_transaction'] && !(typeof data['customer_balance_transaction'] === 'string' || data['customer_balance_transaction'] instanceof String)) {
            throw new Error("Expected the field `customer_balance_transaction` to be a primitive type in the JSON string but got " + data['customer_balance_transaction']);
        }
        // validate the optional field `deleted_at`
        if (data['deleted_at']) { // data not null
          DatabaseDeletedAt.validateJSON(data['deleted_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['invoice'] && !(typeof data['invoice'] === 'string' || data['invoice'] instanceof String)) {
            throw new Error("Expected the field `invoice` to be a primitive type in the JSON string but got " + data['invoice']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['lines'])) {
            throw new Error("Expected the field `lines` to be an array in the JSON data but got " + data['lines']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['pdf'] && !(typeof data['pdf'] === 'string' || data['pdf'] instanceof String)) {
            throw new Error("Expected the field `pdf` to be a primitive type in the JSON string but got " + data['pdf']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['refund'] && !(typeof data['refund'] === 'string' || data['refund'] instanceof String)) {
            throw new Error("Expected the field `refund` to be a primitive type in the JSON string but got " + data['refund']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tax_amounts'])) {
            throw new Error("Expected the field `tax_amounts` to be an array in the JSON data but got " + data['tax_amounts']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          CreditType.validateJSON(data['type']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['voided_at'] && !(typeof data['voided_at'] === 'string' || data['voided_at'] instanceof String)) {
            throw new Error("Expected the field `voided_at` to be a primitive type in the JSON string but got " + data['voided_at']);
        }

        return true;
    }


}



/**
 * The integer amount in %s representing the total amount of the credit note, including tax.
 * @member {Number} amount
 */
CreditCreditNote.prototype['amount'] = undefined;

/**
 * @member {String} created_at
 */
CreditCreditNote.prototype['created_at'] = undefined;

/**
 * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
 * @member {String} currency
 */
CreditCreditNote.prototype['currency'] = undefined;

/**
 * @member {String} customer
 */
CreditCreditNote.prototype['customer'] = undefined;

/**
 * @member {String} customer_balance_transaction
 */
CreditCreditNote.prototype['customer_balance_transaction'] = undefined;

/**
 * @member {module:model/DatabaseDeletedAt} deleted_at
 */
CreditCreditNote.prototype['deleted_at'] = undefined;

/**
 * The integer amount in %s representing the total amount of discount that was credited.
 * @member {Number} discount_amount
 */
CreditCreditNote.prototype['discount_amount'] = undefined;

/**
 * @member {String} id
 */
CreditCreditNote.prototype['id'] = undefined;

/**
 * @member {String} invoice
 */
CreditCreditNote.prototype['invoice'] = undefined;

/**
 * The aggregate amounts calculated per discount for all line items.
 * @member {Array.<String>} lines
 */
CreditCreditNote.prototype['lines'] = undefined;

/**
 * @member {Boolean} livemode
 */
CreditCreditNote.prototype['livemode'] = undefined;

/**
 * Customer-facing text that appears on the credit note PDF.
 * @member {String} memo
 */
CreditCreditNote.prototype['memo'] = undefined;

/**
 * @member {Object} metadata
 */
CreditCreditNote.prototype['metadata'] = undefined;

/**
 * A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
 * @member {String} number
 */
CreditCreditNote.prototype['number'] = undefined;

/**
 * @member {String} object
 */
CreditCreditNote.prototype['object'] = undefined;

/**
 * Amount that was credited outside of Stripe.
 * @member {Number} out_of_band_amount
 */
CreditCreditNote.prototype['out_of_band_amount'] = undefined;

/**
 * The link to download the PDF of the credit note.
 * @member {String} pdf
 */
CreditCreditNote.prototype['pdf'] = undefined;

/**
 * Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
 * @member {String} reason
 */
CreditCreditNote.prototype['reason'] = undefined;

/**
 * @member {String} refund
 */
CreditCreditNote.prototype['refund'] = undefined;

/**
 * Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
 * @member {String} status
 */
CreditCreditNote.prototype['status'] = undefined;

/**
 * The integer amount in %s representing the amount of the credit note, excluding exclusive tax and invoice level discounts.
 * @member {Number} subtotal
 */
CreditCreditNote.prototype['subtotal'] = undefined;

/**
 * The integer amount in %s representing the amount of the credit note, excluding all tax and invoice level discounts.
 * @member {Number} subtotal_excluding_tax
 */
CreditCreditNote.prototype['subtotal_excluding_tax'] = undefined;

/**
 * The aggregate amounts calculated per tax rate for all line items.
 * @member {Array.<String>} tax_amounts
 */
CreditCreditNote.prototype['tax_amounts'] = undefined;

/**
 * The integer amount in %s representing the total amount of the credit note, including tax and all discount.
 * @member {Number} total
 */
CreditCreditNote.prototype['total'] = undefined;

/**
 * The integer amount in %s representing the total amount of the credit note, excluding tax, but including discounts.
 * @member {Number} total_excluding_tax
 */
CreditCreditNote.prototype['total_excluding_tax'] = undefined;

/**
 * Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
 * @member {module:model/CreditType} type
 */
CreditCreditNote.prototype['type'] = undefined;

/**
 * @member {String} updated_at
 */
CreditCreditNote.prototype['updated_at'] = undefined;

/**
 * The time that the credit note was voided.
 * @member {String} voided_at
 */
CreditCreditNote.prototype['voided_at'] = undefined;






export default CreditCreditNote;

