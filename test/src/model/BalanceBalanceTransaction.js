/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BalanceStatus from './BalanceStatus';
import BalanceType from './BalanceType';
import DatabaseDeletedAt from './DatabaseDeletedAt';

/**
 * The BalanceBalanceTransaction model module.
 * @module model/BalanceBalanceTransaction
 * @version 2.0
 */
class BalanceBalanceTransaction {
    /**
     * Constructs a new <code>BalanceBalanceTransaction</code>.
     * @alias module:model/BalanceBalanceTransaction
     */
    constructor() { 
        
        BalanceBalanceTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BalanceBalanceTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BalanceBalanceTransaction} obj Optional instance to populate.
     * @return {module:model/BalanceBalanceTransaction} The populated <code>BalanceBalanceTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BalanceBalanceTransaction();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('available_on')) {
                obj['available_on'] = ApiClient.convertToType(data['available_on'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = DatabaseDeletedAt.constructFromObject(data['deleted_at']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('exchange_rate')) {
                obj['exchange_rate'] = ApiClient.convertToType(data['exchange_rate'], 'Number');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('fee_details')) {
                obj['fee_details'] = ApiClient.convertToType(data['fee_details'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('livemode')) {
                obj['livemode'] = ApiClient.convertToType(data['livemode'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('net')) {
                obj['net'] = ApiClient.convertToType(data['net'], 'Number');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('reporting_category')) {
                obj['reporting_category'] = ApiClient.convertToType(data['reporting_category'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], BalanceStatus);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], BalanceType);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BalanceBalanceTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BalanceBalanceTransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `deleted_at`
        if (data['deleted_at']) { // data not null
          DatabaseDeletedAt.validateJSON(data['deleted_at']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fee_details'])) {
            throw new Error("Expected the field `fee_details` to be an array in the JSON data but got " + data['fee_details']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['reporting_category'] && !(typeof data['reporting_category'] === 'string' || data['reporting_category'] instanceof String)) {
            throw new Error("Expected the field `reporting_category` to be a primitive type in the JSON string but got " + data['reporting_category']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          BalanceStatus.validateJSON(data['status']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          BalanceType.validateJSON(data['type']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * Gross amount of the transaction, in %s.
 * @member {Number} amount
 */
BalanceBalanceTransaction.prototype['amount'] = undefined;

/**
 * The date the transaction's net funds will become available in the Stripe balance.
 * @member {Number} available_on
 */
BalanceBalanceTransaction.prototype['available_on'] = undefined;

/**
 * @member {String} created_at
 */
BalanceBalanceTransaction.prototype['created_at'] = undefined;

/**
 * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
 * @member {String} currency
 */
BalanceBalanceTransaction.prototype['currency'] = undefined;

/**
 * @member {module:model/DatabaseDeletedAt} deleted_at
 */
BalanceBalanceTransaction.prototype['deleted_at'] = undefined;

/**
 * An arbitrary string attached to the object. Often useful for displaying to users.
 * @member {String} description
 */
BalanceBalanceTransaction.prototype['description'] = undefined;

/**
 * The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`.
 * @member {Number} exchange_rate
 */
BalanceBalanceTransaction.prototype['exchange_rate'] = undefined;

/**
 * Fees (in %s) paid for this transaction.
 * @member {Number} fee
 */
BalanceBalanceTransaction.prototype['fee'] = undefined;

/**
 * Detailed breakdown of fees (in %s) paid for this transaction.
 * @member {Array.<String>} fee_details
 */
BalanceBalanceTransaction.prototype['fee_details'] = undefined;

/**
 * @member {String} id
 */
BalanceBalanceTransaction.prototype['id'] = undefined;

/**
 * @member {Boolean} livemode
 */
BalanceBalanceTransaction.prototype['livemode'] = undefined;

/**
 * @member {Object} metadata
 */
BalanceBalanceTransaction.prototype['metadata'] = undefined;

/**
 * Net amount of the transaction, in %s.
 * @member {Number} net
 */
BalanceBalanceTransaction.prototype['net'] = undefined;

/**
 * @member {String} object
 */
BalanceBalanceTransaction.prototype['object'] = undefined;

/**
 * [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective.
 * @member {String} reporting_category
 */
BalanceBalanceTransaction.prototype['reporting_category'] = undefined;

/**
 * @member {String} source
 */
BalanceBalanceTransaction.prototype['source'] = undefined;

/**
 * If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
 * @member {module:model/BalanceStatus} status
 */
BalanceBalanceTransaction.prototype['status'] = undefined;

/**
 * Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
 * @member {module:model/BalanceType} type
 */
BalanceBalanceTransaction.prototype['type'] = undefined;

/**
 * @member {String} updated_at
 */
BalanceBalanceTransaction.prototype['updated_at'] = undefined;






export default BalanceBalanceTransaction;

