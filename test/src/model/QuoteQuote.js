/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatabaseDeletedAt from './DatabaseDeletedAt';

/**
 * The QuoteQuote model module.
 * @module model/QuoteQuote
 * @version 2.0
 */
class QuoteQuote {
    /**
     * Constructs a new <code>QuoteQuote</code>.
     * @alias module:model/QuoteQuote
     */
    constructor() { 
        
        QuoteQuote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuoteQuote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteQuote} obj Optional instance to populate.
     * @return {module:model/QuoteQuote} The populated <code>QuoteQuote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteQuote();

            if (data.hasOwnProperty('amount_subtotal')) {
                obj['amount_subtotal'] = ApiClient.convertToType(data['amount_subtotal'], 'Number');
            }
            if (data.hasOwnProperty('amount_total')) {
                obj['amount_total'] = ApiClient.convertToType(data['amount_total'], 'Number');
            }
            if (data.hasOwnProperty('automatic_tax')) {
                obj['automatic_tax'] = ApiClient.convertToType(data['automatic_tax'], 'Boolean');
            }
            if (data.hasOwnProperty('collection_method')) {
                obj['collection_method'] = ApiClient.convertToType(data['collection_method'], 'String');
            }
            if (data.hasOwnProperty('computed')) {
                obj['computed'] = ApiClient.convertToType(data['computed'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ApiClient.convertToType(data['customer'], 'String');
            }
            if (data.hasOwnProperty('default_tax_rates')) {
                obj['default_tax_rates'] = ApiClient.convertToType(data['default_tax_rates'], ['String']);
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = DatabaseDeletedAt.constructFromObject(data['deleted_at']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = ApiClient.convertToType(data['discounts'], ['String']);
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Number');
            }
            if (data.hasOwnProperty('footer')) {
                obj['footer'] = ApiClient.convertToType(data['footer'], 'String');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = ApiClient.convertToType(data['invoice'], 'String');
            }
            if (data.hasOwnProperty('invoice_settings')) {
                obj['invoice_settings'] = ApiClient.convertToType(data['invoice_settings'], 'String');
            }
            if (data.hasOwnProperty('line_items')) {
                obj['line_items'] = ApiClient.convertToType(data['line_items'], ['String']);
            }
            if (data.hasOwnProperty('livemode')) {
                obj['livemode'] = ApiClient.convertToType(data['livemode'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('status_transitions')) {
                obj['status_transitions'] = ApiClient.convertToType(data['status_transitions'], 'String');
            }
            if (data.hasOwnProperty('subscription')) {
                obj['subscription'] = ApiClient.convertToType(data['subscription'], 'String');
            }
            if (data.hasOwnProperty('subscription_data')) {
                obj['subscription_data'] = ApiClient.convertToType(data['subscription_data'], 'String');
            }
            if (data.hasOwnProperty('subscription_schedule')) {
                obj['subscription_schedule'] = ApiClient.convertToType(data['subscription_schedule'], 'String');
            }
            if (data.hasOwnProperty('total_details')) {
                obj['total_details'] = ApiClient.convertToType(data['total_details'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteQuote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteQuote</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['collection_method'] && !(typeof data['collection_method'] === 'string' || data['collection_method'] instanceof String)) {
            throw new Error("Expected the field `collection_method` to be a primitive type in the JSON string but got " + data['collection_method']);
        }
        // ensure the json data is a string
        if (data['computed'] && !(typeof data['computed'] === 'string' || data['computed'] instanceof String)) {
            throw new Error("Expected the field `computed` to be a primitive type in the JSON string but got " + data['computed']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['customer'] && !(typeof data['customer'] === 'string' || data['customer'] instanceof String)) {
            throw new Error("Expected the field `customer` to be a primitive type in the JSON string but got " + data['customer']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['default_tax_rates'])) {
            throw new Error("Expected the field `default_tax_rates` to be an array in the JSON data but got " + data['default_tax_rates']);
        }
        // validate the optional field `deleted_at`
        if (data['deleted_at']) { // data not null
          DatabaseDeletedAt.validateJSON(data['deleted_at']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['discounts'])) {
            throw new Error("Expected the field `discounts` to be an array in the JSON data but got " + data['discounts']);
        }
        // ensure the json data is a string
        if (data['footer'] && !(typeof data['footer'] === 'string' || data['footer'] instanceof String)) {
            throw new Error("Expected the field `footer` to be a primitive type in the JSON string but got " + data['footer']);
        }
        // ensure the json data is a string
        if (data['header'] && !(typeof data['header'] === 'string' || data['header'] instanceof String)) {
            throw new Error("Expected the field `header` to be a primitive type in the JSON string but got " + data['header']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['invoice'] && !(typeof data['invoice'] === 'string' || data['invoice'] instanceof String)) {
            throw new Error("Expected the field `invoice` to be a primitive type in the JSON string but got " + data['invoice']);
        }
        // ensure the json data is a string
        if (data['invoice_settings'] && !(typeof data['invoice_settings'] === 'string' || data['invoice_settings'] instanceof String)) {
            throw new Error("Expected the field `invoice_settings` to be a primitive type in the JSON string but got " + data['invoice_settings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['line_items'])) {
            throw new Error("Expected the field `line_items` to be an array in the JSON data but got " + data['line_items']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['status_transitions'] && !(typeof data['status_transitions'] === 'string' || data['status_transitions'] instanceof String)) {
            throw new Error("Expected the field `status_transitions` to be a primitive type in the JSON string but got " + data['status_transitions']);
        }
        // ensure the json data is a string
        if (data['subscription'] && !(typeof data['subscription'] === 'string' || data['subscription'] instanceof String)) {
            throw new Error("Expected the field `subscription` to be a primitive type in the JSON string but got " + data['subscription']);
        }
        // ensure the json data is a string
        if (data['subscription_data'] && !(typeof data['subscription_data'] === 'string' || data['subscription_data'] instanceof String)) {
            throw new Error("Expected the field `subscription_data` to be a primitive type in the JSON string but got " + data['subscription_data']);
        }
        // ensure the json data is a string
        if (data['subscription_schedule'] && !(typeof data['subscription_schedule'] === 'string' || data['subscription_schedule'] instanceof String)) {
            throw new Error("Expected the field `subscription_schedule` to be a primitive type in the JSON string but got " + data['subscription_schedule']);
        }
        // ensure the json data is a string
        if (data['total_details'] && !(typeof data['total_details'] === 'string' || data['total_details'] instanceof String)) {
            throw new Error("Expected the field `total_details` to be a primitive type in the JSON string but got " + data['total_details']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * Total before any discounts or taxes are applied.
 * @member {Number} amount_subtotal
 */
QuoteQuote.prototype['amount_subtotal'] = undefined;

/**
 * Total after discounts and taxes are applied.
 * @member {Number} amount_total
 */
QuoteQuote.prototype['amount_total'] = undefined;

/**
 * @member {Boolean} automatic_tax
 */
QuoteQuote.prototype['automatic_tax'] = undefined;

/**
 * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
 * @member {String} collection_method
 */
QuoteQuote.prototype['collection_method'] = undefined;

/**
 * @member {String} computed
 */
QuoteQuote.prototype['computed'] = undefined;

/**
 * @member {String} created_at
 */
QuoteQuote.prototype['created_at'] = undefined;

/**
 * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
 * @member {String} currency
 */
QuoteQuote.prototype['currency'] = undefined;

/**
 * @member {String} customer
 */
QuoteQuote.prototype['customer'] = undefined;

/**
 * @member {Array.<String>} default_tax_rates
 */
QuoteQuote.prototype['default_tax_rates'] = undefined;

/**
 * @member {module:model/DatabaseDeletedAt} deleted_at
 */
QuoteQuote.prototype['deleted_at'] = undefined;

/**
 * A description that will be displayed on the quote PDF.
 * @member {String} description
 */
QuoteQuote.prototype['description'] = undefined;

/**
 * @member {Array.<String>} discounts
 */
QuoteQuote.prototype['discounts'] = undefined;

/**
 * The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
 * @member {Number} expires_at
 */
QuoteQuote.prototype['expires_at'] = undefined;

/**
 * A footer that will be displayed on the quote PDF.
 * @member {String} footer
 */
QuoteQuote.prototype['footer'] = undefined;

/**
 * A header that will be displayed on the quote PDF.
 * @member {String} header
 */
QuoteQuote.prototype['header'] = undefined;

/**
 * @member {String} id
 */
QuoteQuote.prototype['id'] = undefined;

/**
 * @member {String} invoice
 */
QuoteQuote.prototype['invoice'] = undefined;

/**
 * Unique identifier for the object.
 * @member {String} invoice_settings
 */
QuoteQuote.prototype['invoice_settings'] = undefined;

/**
 * @member {Array.<String>} line_items
 */
QuoteQuote.prototype['line_items'] = undefined;

/**
 * @member {Boolean} livemode
 */
QuoteQuote.prototype['livemode'] = undefined;

/**
 * @member {Object} metadata
 */
QuoteQuote.prototype['metadata'] = undefined;

/**
 * A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
 * @member {String} number
 */
QuoteQuote.prototype['number'] = undefined;

/**
 * @member {String} object
 */
QuoteQuote.prototype['object'] = undefined;

/**
 * The status of the quote.
 * @member {String} status
 */
QuoteQuote.prototype['status'] = undefined;

/**
 * @member {String} status_transitions
 */
QuoteQuote.prototype['status_transitions'] = undefined;

/**
 * @member {String} subscription
 */
QuoteQuote.prototype['subscription'] = undefined;

/**
 * @member {String} subscription_data
 */
QuoteQuote.prototype['subscription_data'] = undefined;

/**
 * @member {String} subscription_schedule
 */
QuoteQuote.prototype['subscription_schedule'] = undefined;

/**
 * @member {String} total_details
 */
QuoteQuote.prototype['total_details'] = undefined;

/**
 * @member {String} updated_at
 */
QuoteQuote.prototype['updated_at'] = undefined;






export default QuoteQuote;

