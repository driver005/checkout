/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatabaseDeletedAt from './DatabaseDeletedAt';

/**
 * The PlanPlan model module.
 * @module model/PlanPlan
 * @version 2.0
 */
class PlanPlan {
    /**
     * Constructs a new <code>PlanPlan</code>.
     * @alias module:model/PlanPlan
     */
    constructor() { 
        
        PlanPlan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlanPlan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlanPlan} obj Optional instance to populate.
     * @return {module:model/PlanPlan} The populated <code>PlanPlan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlanPlan();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('aggregate_usage')) {
                obj['aggregate_usage'] = ApiClient.convertToType(data['aggregate_usage'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('amount_decimal')) {
                obj['amount_decimal'] = ApiClient.convertToType(data['amount_decimal'], 'Number');
            }
            if (data.hasOwnProperty('billing_scheme')) {
                obj['billing_scheme'] = ApiClient.convertToType(data['billing_scheme'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = DatabaseDeletedAt.constructFromObject(data['deleted_at']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('interval_count')) {
                obj['interval_count'] = ApiClient.convertToType(data['interval_count'], 'Number');
            }
            if (data.hasOwnProperty('livemode')) {
                obj['livemode'] = ApiClient.convertToType(data['livemode'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('tiers')) {
                obj['tiers'] = ApiClient.convertToType(data['tiers'], ['String']);
            }
            if (data.hasOwnProperty('tiers_mode')) {
                obj['tiers_mode'] = ApiClient.convertToType(data['tiers_mode'], 'String');
            }
            if (data.hasOwnProperty('transform_usage')) {
                obj['transform_usage'] = ApiClient.convertToType(data['transform_usage'], 'String');
            }
            if (data.hasOwnProperty('trial_period_days')) {
                obj['trial_period_days'] = ApiClient.convertToType(data['trial_period_days'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('usage_type')) {
                obj['usage_type'] = ApiClient.convertToType(data['usage_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlanPlan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlanPlan</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregate_usage'] && !(typeof data['aggregate_usage'] === 'string' || data['aggregate_usage'] instanceof String)) {
            throw new Error("Expected the field `aggregate_usage` to be a primitive type in the JSON string but got " + data['aggregate_usage']);
        }
        // ensure the json data is a string
        if (data['billing_scheme'] && !(typeof data['billing_scheme'] === 'string' || data['billing_scheme'] instanceof String)) {
            throw new Error("Expected the field `billing_scheme` to be a primitive type in the JSON string but got " + data['billing_scheme']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `deleted_at`
        if (data['deleted_at']) { // data not null
          DatabaseDeletedAt.validateJSON(data['deleted_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tiers'])) {
            throw new Error("Expected the field `tiers` to be an array in the JSON data but got " + data['tiers']);
        }
        // ensure the json data is a string
        if (data['tiers_mode'] && !(typeof data['tiers_mode'] === 'string' || data['tiers_mode'] instanceof String)) {
            throw new Error("Expected the field `tiers_mode` to be a primitive type in the JSON string but got " + data['tiers_mode']);
        }
        // ensure the json data is a string
        if (data['transform_usage'] && !(typeof data['transform_usage'] === 'string' || data['transform_usage'] instanceof String)) {
            throw new Error("Expected the field `transform_usage` to be a primitive type in the JSON string but got " + data['transform_usage']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['usage_type'] && !(typeof data['usage_type'] === 'string' || data['usage_type'] instanceof String)) {
            throw new Error("Expected the field `usage_type` to be a primitive type in the JSON string but got " + data['usage_type']);
        }

        return true;
    }


}



/**
 * Whether the plan can be used for new purchases.
 * @member {Boolean} active
 */
PlanPlan.prototype['active'] = undefined;

/**
 * Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
 * @member {String} aggregate_usage
 */
PlanPlan.prototype['aggregate_usage'] = undefined;

/**
 * The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
 * @member {Number} amount
 */
PlanPlan.prototype['amount'] = undefined;

/**
 * The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
 * @member {Number} amount_decimal
 */
PlanPlan.prototype['amount_decimal'] = undefined;

/**
 * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
 * @member {String} billing_scheme
 */
PlanPlan.prototype['billing_scheme'] = undefined;

/**
 * @member {String} created_at
 */
PlanPlan.prototype['created_at'] = undefined;

/**
 * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
 * @member {String} currency
 */
PlanPlan.prototype['currency'] = undefined;

/**
 * @member {module:model/DatabaseDeletedAt} deleted_at
 */
PlanPlan.prototype['deleted_at'] = undefined;

/**
 * @member {String} id
 */
PlanPlan.prototype['id'] = undefined;

/**
 * The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
 * @member {String} interval
 */
PlanPlan.prototype['interval'] = undefined;

/**
 * The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
 * @member {Number} interval_count
 */
PlanPlan.prototype['interval_count'] = undefined;

/**
 * @member {Boolean} livemode
 */
PlanPlan.prototype['livemode'] = undefined;

/**
 * @member {Object} metadata
 */
PlanPlan.prototype['metadata'] = undefined;

/**
 * A brief description of the plan, hidden from customers.
 * @member {String} nickname
 */
PlanPlan.prototype['nickname'] = undefined;

/**
 * @member {String} object
 */
PlanPlan.prototype['object'] = undefined;

/**
 * @member {String} product
 */
PlanPlan.prototype['product'] = undefined;

/**
 * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
 * @member {Array.<String>} tiers
 */
PlanPlan.prototype['tiers'] = undefined;

/**
 * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
 * @member {String} tiers_mode
 */
PlanPlan.prototype['tiers_mode'] = undefined;

/**
 * @member {String} transform_usage
 */
PlanPlan.prototype['transform_usage'] = undefined;

/**
 * Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
 * @member {Number} trial_period_days
 */
PlanPlan.prototype['trial_period_days'] = undefined;

/**
 * @member {String} updated_at
 */
PlanPlan.prototype['updated_at'] = undefined;

/**
 * Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
 * @member {String} usage_type
 */
PlanPlan.prototype['usage_type'] = undefined;






export default PlanPlan;

