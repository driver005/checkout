/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SubscriptionScheduleSubscriptionSchedule from '../model/SubscriptionScheduleSubscriptionSchedule';

/**
* SubscriptionSchedule service.
* @module api/SubscriptionScheduleApi
* @version 2.0
*/
export default class SubscriptionScheduleApi {

    /**
    * Constructs a new SubscriptionScheduleApi. 
    * @alias module:api/SubscriptionScheduleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1SubscriptionSchedulesGet operation.
     * @callback module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionScheduleSubscriptionSchedule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing SubscriptionSchedules
     * Get all existing SubscriptionSchedules.
     * @param {module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionScheduleSubscriptionSchedule>}
     */
    v1SubscriptionSchedulesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubscriptionScheduleSubscriptionSchedule];
      return this.apiClient.callApi(
        '/v1/subscription_schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionSchedulesIdCancelePost operation.
     * @callback module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdCancelePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionScheduleSubscriptionSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancel SubscriptionSchedule
     * Cancel SubscriptionSchedule.
     * @param {String} id SubscriptionSchedule ID
     * @param {module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdCancelePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionScheduleSubscriptionSchedule}
     */
    v1SubscriptionSchedulesIdCancelePost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionSchedulesIdCancelePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionScheduleSubscriptionSchedule;
      return this.apiClient.callApi(
        '/v1/subscription_schedules/{id}/cancele', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionSchedulesIdDelete operation.
     * @callback module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete SubscriptionSchedule by given ID
     * Delete SubscriptionSchedule by given ID.
     * @param {String} id SubscriptionSchedule ID
     * @param {module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1SubscriptionSchedulesIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionSchedulesIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/subscription_schedules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionSchedulesIdGet operation.
     * @callback module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionScheduleSubscriptionSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get SubscriptionSchedule by given ID or 404 error.
     * Get SubscriptionSchedule by given ID or 404 error.
     * @param {String} id SubscriptionSchedule ID
     * @param {module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionScheduleSubscriptionSchedule}
     */
    v1SubscriptionSchedulesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionSchedulesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionScheduleSubscriptionSchedule;
      return this.apiClient.callApi(
        '/v1/subscription_schedules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionSchedulesIdPost operation.
     * @callback module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionScheduleSubscriptionSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update SubscriptionSchedule
     * Update SubscriptionSchedule.
     * @param {String} id SubscriptionSchedule ID
     * @param {module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionScheduleSubscriptionSchedule}
     */
    v1SubscriptionSchedulesIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionSchedulesIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionScheduleSubscriptionSchedule;
      return this.apiClient.callApi(
        '/v1/subscription_schedules/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionSchedulesIdReleasePost operation.
     * @callback module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdReleasePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionScheduleSubscriptionSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * release SubscriptionSchedule
     * Release SubscriptionSchedule.
     * @param {String} id SubscriptionSchedule ID
     * @param {module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesIdReleasePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionScheduleSubscriptionSchedule}
     */
    v1SubscriptionSchedulesIdReleasePost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionSchedulesIdReleasePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionScheduleSubscriptionSchedule;
      return this.apiClient.callApi(
        '/v1/subscription_schedules/{id}/release', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionSchedulesPost operation.
     * @callback module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionScheduleSubscriptionSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new SubscriptionSchedule
     * Create a new SubscriptionSchedule.
     * @param {module:api/SubscriptionScheduleApi~v1SubscriptionSchedulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionScheduleSubscriptionSchedule}
     */
    v1SubscriptionSchedulesPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionScheduleSubscriptionSchedule;
      return this.apiClient.callApi(
        '/v1/subscription_schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
