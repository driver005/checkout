/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsageRecordUsageRecord from '../model/UsageRecordUsageRecord';

/**
* UsageRecord service.
* @module api/UsageRecordApi
* @version 2.0
*/
export default class UsageRecordApi {

    /**
    * Constructs a new UsageRecordApi. 
    * @alias module:api/UsageRecordApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1SubscriptionItemsIdUsageRecordSummariesGet operation.
     * @callback module:api/UsageRecordApi~v1SubscriptionItemsIdUsageRecordSummariesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsageRecordUsageRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing UsageRecords
     * Get all existing UsageRecords.
     * @param {module:api/UsageRecordApi~v1SubscriptionItemsIdUsageRecordSummariesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsageRecordUsageRecord>}
     */
    v1SubscriptionItemsIdUsageRecordSummariesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UsageRecordUsageRecord];
      return this.apiClient.callApi(
        '/v1/subscription_items/{id}/usage_record_summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionItemsIdUsageRecordsGet operation.
     * @callback module:api/UsageRecordApi~v1SubscriptionItemsIdUsageRecordsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageRecordUsageRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get UsageRecord by given ID or 404 error.
     * Get UsageRecord by given ID or 404 error.
     * @param {String} id SubscriptionItem ID
     * @param {module:api/UsageRecordApi~v1SubscriptionItemsIdUsageRecordsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageRecordUsageRecord}
     */
    v1SubscriptionItemsIdUsageRecordsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionItemsIdUsageRecordsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageRecordUsageRecord;
      return this.apiClient.callApi(
        '/v1/subscription_items/{id}/usage_records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UsageRecordIdDelete operation.
     * @callback module:api/UsageRecordApi~v1UsageRecordIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete UsageRecord by given ID
     * Delete UsageRecord by given ID.
     * @param {String} id SubscriptionItem ID
     * @param {module:api/UsageRecordApi~v1UsageRecordIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1UsageRecordIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1UsageRecordIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/usage_record/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UsageRecordIdPost operation.
     * @callback module:api/UsageRecordApi~v1UsageRecordIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageRecordUsageRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update UsageRecord
     * Update UsageRecord.
     * @param {String} id SubscriptionItem ID
     * @param {module:api/UsageRecordApi~v1UsageRecordIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageRecordUsageRecord}
     */
    v1UsageRecordIdPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1UsageRecordIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageRecordUsageRecord;
      return this.apiClient.callApi(
        '/v1/usage_record/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UsageRecordPost operation.
     * @callback module:api/UsageRecordApi~v1UsageRecordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageRecordUsageRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new UsageRecord
     * Create a new UsageRecord.
     * @param {module:api/UsageRecordApi~v1UsageRecordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageRecordUsageRecord}
     */
    v1UsageRecordPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageRecordUsageRecord;
      return this.apiClient.callApi(
        '/v1/usage_record', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
