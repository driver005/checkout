/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SourceSource from '../model/SourceSource';

/**
* Source service.
* @module api/SourceApi
* @version 2.0
*/
export default class SourceApi {

    /**
    * Constructs a new SourceApi. 
    * @alias module:api/SourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1CustomersIdSourcesIdDelete operation.
     * @callback module:api/SourceApi~v1CustomersIdSourcesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * dettaching Source from Customer by given ID
     * dettaching Source from Customer by given ID.
     * @param {String} id Source ID
     * @param {module:api/SourceApi~v1CustomersIdSourcesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1CustomersIdSourcesIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CustomersIdSourcesIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/customers/{id}/sources/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CustomersIdSourcesPost operation.
     * @callback module:api/SourceApi~v1CustomersIdSourcesPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * attaching Source to Customer by given ID
     * Attaching Source to Customer by given ID.
     * @param {String} id Source ID
     * @param {module:api/SourceApi~v1CustomersIdSourcesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1CustomersIdSourcesPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CustomersIdSourcesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/customers/{id}/sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SourcesGet operation.
     * @callback module:api/SourceApi~v1SourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SourceSource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing Sources
     * Get all existing Sources.
     * @param {module:api/SourceApi~v1SourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SourceSource>}
     */
    v1SourcesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SourceSource];
      return this.apiClient.callApi(
        '/v1/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SourcesIdDelete operation.
     * @callback module:api/SourceApi~v1SourcesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete Source by given ID
     * Delete Source by given ID.
     * @param {String} id Source ID
     * @param {module:api/SourceApi~v1SourcesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1SourcesIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SourcesIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/sources/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SourcesIdGet operation.
     * @callback module:api/SourceApi~v1SourcesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Source by given ID or 404 error.
     * Get Source by given ID or 404 error.
     * @param {String} id Source ID
     * @param {module:api/SourceApi~v1SourcesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceSource}
     */
    v1SourcesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SourcesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceSource;
      return this.apiClient.callApi(
        '/v1/sources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SourcesIdPost operation.
     * @callback module:api/SourceApi~v1SourcesIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update Source
     * Update Source.
     * @param {String} id Source ID
     * @param {module:api/SourceApi~v1SourcesIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceSource}
     */
    v1SourcesIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SourcesIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceSource;
      return this.apiClient.callApi(
        '/v1/sources/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SourcesPost operation.
     * @callback module:api/SourceApi~v1SourcesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new Source
     * Create a new Source.
     * @param {module:api/SourceApi~v1SourcesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceSource}
     */
    v1SourcesPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceSource;
      return this.apiClient.callApi(
        '/v1/sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
