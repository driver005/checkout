/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RefundRefund from '../model/RefundRefund';

/**
* Refund service.
* @module api/RefundApi
* @version 2.0
*/
export default class RefundApi {

    /**
    * Constructs a new RefundApi. 
    * @alias module:api/RefundApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1RefundsGet operation.
     * @callback module:api/RefundApi~v1RefundsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RefundRefund>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing Refunds
     * Get all existing Refunds.
     * @param {module:api/RefundApi~v1RefundsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RefundRefund>}
     */
    v1RefundsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RefundRefund];
      return this.apiClient.callApi(
        '/v1/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1RefundsIdCancelePost operation.
     * @callback module:api/RefundApi~v1RefundsIdCancelePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundRefund} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancel Refund
     * Cancel Refund.
     * @param {String} id Refund ID
     * @param {module:api/RefundApi~v1RefundsIdCancelePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundRefund}
     */
    v1RefundsIdCancelePost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1RefundsIdCancelePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefundRefund;
      return this.apiClient.callApi(
        '/v1/refunds/{id}/cancele', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1RefundsIdDelete operation.
     * @callback module:api/RefundApi~v1RefundsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete Refund by given ID
     * Delete Refund by given ID.
     * @param {String} id Refund ID
     * @param {module:api/RefundApi~v1RefundsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1RefundsIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1RefundsIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/refunds/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1RefundsIdGet operation.
     * @callback module:api/RefundApi~v1RefundsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundRefund} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Refund by given ID or 404 error.
     * Get Refund by given ID or 404 error.
     * @param {String} id Refund ID
     * @param {module:api/RefundApi~v1RefundsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundRefund}
     */
    v1RefundsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1RefundsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefundRefund;
      return this.apiClient.callApi(
        '/v1/refunds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1RefundsIdPost operation.
     * @callback module:api/RefundApi~v1RefundsIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundRefund} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update Refund
     * Update Refund.
     * @param {String} id Refund ID
     * @param {module:api/RefundApi~v1RefundsIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundRefund}
     */
    v1RefundsIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1RefundsIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefundRefund;
      return this.apiClient.callApi(
        '/v1/refunds/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1RefundsPost operation.
     * @callback module:api/RefundApi~v1RefundsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundRefund} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new Refund
     * Create a new Refund.
     * @param {module:api/RefundApi~v1RefundsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundRefund}
     */
    v1RefundsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefundRefund;
      return this.apiClient.callApi(
        '/v1/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
