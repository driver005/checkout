/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QuoteQuote from '../model/QuoteQuote';

/**
* Quote service.
* @module api/QuoteApi
* @version 2.0
*/
export default class QuoteApi {

    /**
    * Constructs a new QuoteApi. 
    * @alias module:api/QuoteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1QuotesGet operation.
     * @callback module:api/QuoteApi~v1QuotesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuoteQuote>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing Quotes
     * Get all existing Quotes.
     * @param {module:api/QuoteApi~v1QuotesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuoteQuote>}
     */
    v1QuotesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [QuoteQuote];
      return this.apiClient.callApi(
        '/v1/quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesIdAcceptPost operation.
     * @callback module:api/QuoteApi~v1QuotesIdAcceptPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteQuote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * accept Quote
     * Accept Quote.
     * @param {String} id Quote ID
     * @param {module:api/QuoteApi~v1QuotesIdAcceptPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteQuote}
     */
    v1QuotesIdAcceptPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1QuotesIdAcceptPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuoteQuote;
      return this.apiClient.callApi(
        '/v1/quotes/{id}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesIdCancelPost operation.
     * @callback module:api/QuoteApi~v1QuotesIdCancelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteQuote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancel Quote
     * Cancel Quote.
     * @param {String} id Quote ID
     * @param {module:api/QuoteApi~v1QuotesIdCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteQuote}
     */
    v1QuotesIdCancelPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1QuotesIdCancelPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuoteQuote;
      return this.apiClient.callApi(
        '/v1/quotes/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesIdDelete operation.
     * @callback module:api/QuoteApi~v1QuotesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete Quote by given ID
     * Delete Quote by given ID.
     * @param {String} id Quote ID
     * @param {module:api/QuoteApi~v1QuotesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1QuotesIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1QuotesIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/quotes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesIdFinalizePost operation.
     * @callback module:api/QuoteApi~v1QuotesIdFinalizePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteQuote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * finalize Quote
     * Finalize Quote.
     * @param {String} id Quote ID
     * @param {module:api/QuoteApi~v1QuotesIdFinalizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteQuote}
     */
    v1QuotesIdFinalizePost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1QuotesIdFinalizePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuoteQuote;
      return this.apiClient.callApi(
        '/v1/quotes/{id}/finalize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesIdGet operation.
     * @callback module:api/QuoteApi~v1QuotesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteQuote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Quote by given ID or 404 error.
     * Get Quote by given ID or 404 error.
     * @param {String} id Quote ID
     * @param {module:api/QuoteApi~v1QuotesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteQuote}
     */
    v1QuotesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1QuotesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuoteQuote;
      return this.apiClient.callApi(
        '/v1/quotes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesIdPost operation.
     * @callback module:api/QuoteApi~v1QuotesIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteQuote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update Quote
     * Update Quote.
     * @param {String} id Quote ID
     * @param {module:api/QuoteApi~v1QuotesIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteQuote}
     */
    v1QuotesIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1QuotesIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuoteQuote;
      return this.apiClient.callApi(
        '/v1/quotes/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesPost operation.
     * @callback module:api/QuoteApi~v1QuotesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteQuote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new Quote
     * Create a new Quote.
     * @param {module:api/QuoteApi~v1QuotesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteQuote}
     */
    v1QuotesPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuoteQuote;
      return this.apiClient.callApi(
        '/v1/quotes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
