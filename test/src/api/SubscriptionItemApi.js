/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SubscriptionItemSubscriptionItem from '../model/SubscriptionItemSubscriptionItem';

/**
* SubscriptionItem service.
* @module api/SubscriptionItemApi
* @version 2.0
*/
export default class SubscriptionItemApi {

    /**
    * Constructs a new SubscriptionItemApi. 
    * @alias module:api/SubscriptionItemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1SubscriptionItemsGet operation.
     * @callback module:api/SubscriptionItemApi~v1SubscriptionItemsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionItemSubscriptionItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing SubscriptionItems
     * Get all existing SubscriptionItems.
     * @param {module:api/SubscriptionItemApi~v1SubscriptionItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionItemSubscriptionItem>}
     */
    v1SubscriptionItemsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubscriptionItemSubscriptionItem];
      return this.apiClient.callApi(
        '/v1/subscription_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionItemsIdDelete operation.
     * @callback module:api/SubscriptionItemApi~v1SubscriptionItemsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete SubscriptionItem by given ID
     * Delete SubscriptionItem by given ID.
     * @param {String} id SubscriptionItem ID
     * @param {module:api/SubscriptionItemApi~v1SubscriptionItemsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1SubscriptionItemsIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionItemsIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/subscription_items/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionItemsIdGet operation.
     * @callback module:api/SubscriptionItemApi~v1SubscriptionItemsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionItemSubscriptionItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get SubscriptionItem by given ID or 404 error.
     * Get SubscriptionItem by given ID or 404 error.
     * @param {String} id SubscriptionItem ID
     * @param {module:api/SubscriptionItemApi~v1SubscriptionItemsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionItemSubscriptionItem}
     */
    v1SubscriptionItemsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionItemsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionItemSubscriptionItem;
      return this.apiClient.callApi(
        '/v1/subscription_items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionItemsIdPost operation.
     * @callback module:api/SubscriptionItemApi~v1SubscriptionItemsIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionItemSubscriptionItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update SubscriptionItem
     * Update SubscriptionItem.
     * @param {String} id SubscriptionItem ID
     * @param {module:api/SubscriptionItemApi~v1SubscriptionItemsIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionItemSubscriptionItem}
     */
    v1SubscriptionItemsIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionItemsIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionItemSubscriptionItem;
      return this.apiClient.callApi(
        '/v1/subscription_items/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionItemsPost operation.
     * @callback module:api/SubscriptionItemApi~v1SubscriptionItemsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionItemSubscriptionItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new SubscriptionItem
     * Create a new SubscriptionItem.
     * @param {module:api/SubscriptionItemApi~v1SubscriptionItemsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionItemSubscriptionItem}
     */
    v1SubscriptionItemsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionItemSubscriptionItem;
      return this.apiClient.callApi(
        '/v1/subscription_items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
