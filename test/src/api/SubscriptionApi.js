/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SubscriptionSubscription from '../model/SubscriptionSubscription';

/**
* Subscription service.
* @module api/SubscriptionApi
* @version 2.0
*/
export default class SubscriptionApi {

    /**
    * Constructs a new SubscriptionApi. 
    * @alias module:api/SubscriptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1SubscriptionsGet operation.
     * @callback module:api/SubscriptionApi~v1SubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionSubscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing Subscriptions
     * Get all existing Subscriptions.
     * @param {module:api/SubscriptionApi~v1SubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionSubscription>}
     */
    v1SubscriptionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubscriptionSubscription];
      return this.apiClient.callApi(
        '/v1/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionsIdDelete operation.
     * @callback module:api/SubscriptionApi~v1SubscriptionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete Subscription by given ID
     * Delete Subscription by given ID.
     * @param {String} id Subscription ID
     * @param {module:api/SubscriptionApi~v1SubscriptionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1SubscriptionsIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionsIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionsIdGet operation.
     * @callback module:api/SubscriptionApi~v1SubscriptionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Subscription by given ID or 404 error.
     * Get Subscription by given ID or 404 error.
     * @param {String} id Subscription ID
     * @param {module:api/SubscriptionApi~v1SubscriptionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionSubscription}
     */
    v1SubscriptionsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionSubscription;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionsIdPost operation.
     * @callback module:api/SubscriptionApi~v1SubscriptionsIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update Subscription
     * Update Subscription.
     * @param {String} id Subscription ID
     * @param {module:api/SubscriptionApi~v1SubscriptionsIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionSubscription}
     */
    v1SubscriptionsIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1SubscriptionsIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionSubscription;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SubscriptionsPost operation.
     * @callback module:api/SubscriptionApi~v1SubscriptionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new Subscription
     * Create a new Subscription.
     * @param {module:api/SubscriptionApi~v1SubscriptionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionSubscription}
     */
    v1SubscriptionsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionSubscription;
      return this.apiClient.callApi(
        '/v1/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
