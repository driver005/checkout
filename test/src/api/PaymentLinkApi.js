/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LinkPaymentLink from '../model/LinkPaymentLink';

/**
* PaymentLink service.
* @module api/PaymentLinkApi
* @version 2.0
*/
export default class PaymentLinkApi {

    /**
    * Constructs a new PaymentLinkApi. 
    * @alias module:api/PaymentLinkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1PaymentLinksGet operation.
     * @callback module:api/PaymentLinkApi~v1PaymentLinksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LinkPaymentLink>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing PaymentLinks
     * Get all existing PaymentLinks.
     * @param {module:api/PaymentLinkApi~v1PaymentLinksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LinkPaymentLink>}
     */
    v1PaymentLinksGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LinkPaymentLink];
      return this.apiClient.callApi(
        '/v1/payment_links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentLinksIdDelete operation.
     * @callback module:api/PaymentLinkApi~v1PaymentLinksIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete PaymentLink by given ID
     * Delete PaymentLink by given ID.
     * @param {String} id PaymentLink ID
     * @param {module:api/PaymentLinkApi~v1PaymentLinksIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1PaymentLinksIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PaymentLinksIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/payment_links/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentLinksIdGet operation.
     * @callback module:api/PaymentLinkApi~v1PaymentLinksIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkPaymentLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get PaymentLink by given ID or 404 error.
     * Get PaymentLink by given ID or 404 error.
     * @param {String} id PaymentLink ID
     * @param {module:api/PaymentLinkApi~v1PaymentLinksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkPaymentLink}
     */
    v1PaymentLinksIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PaymentLinksIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkPaymentLink;
      return this.apiClient.callApi(
        '/v1/payment_links/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentLinksIdPost operation.
     * @callback module:api/PaymentLinkApi~v1PaymentLinksIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkPaymentLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update PaymentLink
     * Update PaymentLink.
     * @param {String} id PaymentLink ID
     * @param {module:api/PaymentLinkApi~v1PaymentLinksIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkPaymentLink}
     */
    v1PaymentLinksIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PaymentLinksIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkPaymentLink;
      return this.apiClient.callApi(
        '/v1/payment_links/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentLinksPost operation.
     * @callback module:api/PaymentLinkApi~v1PaymentLinksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkPaymentLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new PaymentLink
     * Create a new PaymentLink.
     * @param {module:api/PaymentLinkApi~v1PaymentLinksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkPaymentLink}
     */
    v1PaymentLinksPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkPaymentLink;
      return this.apiClient.callApi(
        '/v1/payment_links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
