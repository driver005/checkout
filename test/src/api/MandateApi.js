/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MandateMandate from '../model/MandateMandate';

/**
* Mandate service.
* @module api/MandateApi
* @version 2.0
*/
export default class MandateApi {

    /**
    * Constructs a new MandateApi. 
    * @alias module:api/MandateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1MandatesGet operation.
     * @callback module:api/MandateApi~v1MandatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MandateMandate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing Mandates
     * Get all existing Mandates.
     * @param {module:api/MandateApi~v1MandatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MandateMandate>}
     */
    v1MandatesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MandateMandate];
      return this.apiClient.callApi(
        '/v1/mandates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MandatesIdDelete operation.
     * @callback module:api/MandateApi~v1MandatesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete Mandate by given ID
     * Delete Mandate by given ID.
     * @param {String} id Mandate ID
     * @param {module:api/MandateApi~v1MandatesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1MandatesIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MandatesIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/mandates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MandatesIdGet operation.
     * @callback module:api/MandateApi~v1MandatesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MandateMandate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Mandate by given ID or 404 error.
     * Get Mandate by given ID or 404 error.
     * @param {String} id Mandate ID
     * @param {module:api/MandateApi~v1MandatesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MandateMandate}
     */
    v1MandatesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MandatesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MandateMandate;
      return this.apiClient.callApi(
        '/v1/mandates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MandatesIdPost operation.
     * @callback module:api/MandateApi~v1MandatesIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MandateMandate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update Mandate
     * Update Mandate.
     * @param {String} id Mandate ID
     * @param {module:api/MandateApi~v1MandatesIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MandateMandate}
     */
    v1MandatesIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1MandatesIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MandateMandate;
      return this.apiClient.callApi(
        '/v1/mandates/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MandatesPost operation.
     * @callback module:api/MandateApi~v1MandatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MandateMandate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new Mandate
     * Create a new Mandate.
     * @param {module:api/MandateApi~v1MandatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MandateMandate}
     */
    v1MandatesPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MandateMandate;
      return this.apiClient.callApi(
        '/v1/mandates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
