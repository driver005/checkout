/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlanPlan from '../model/PlanPlan';

/**
* Plan service.
* @module api/PlanApi
* @version 2.0
*/
export default class PlanApi {

    /**
    * Constructs a new PlanApi. 
    * @alias module:api/PlanApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1PlansGet operation.
     * @callback module:api/PlanApi~v1PlansGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlanPlan>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing Plans
     * Get all existing Plans.
     * @param {module:api/PlanApi~v1PlansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlanPlan>}
     */
    v1PlansGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlanPlan];
      return this.apiClient.callApi(
        '/v1/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PlansIdDelete operation.
     * @callback module:api/PlanApi~v1PlansIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete Plan by given ID
     * Delete Plan by given ID.
     * @param {String} id Plan ID
     * @param {module:api/PlanApi~v1PlansIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1PlansIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PlansIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/plans/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PlansIdGet operation.
     * @callback module:api/PlanApi~v1PlansIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Plan by given ID or 404 error.
     * Get Plan by given ID or 404 error.
     * @param {String} id Plan ID
     * @param {module:api/PlanApi~v1PlansIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanPlan}
     */
    v1PlansIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PlansIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlanPlan;
      return this.apiClient.callApi(
        '/v1/plans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PlansIdPost operation.
     * @callback module:api/PlanApi~v1PlansIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update Plan
     * Update Plan.
     * @param {String} id Plan ID
     * @param {module:api/PlanApi~v1PlansIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanPlan}
     */
    v1PlansIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PlansIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlanPlan;
      return this.apiClient.callApi(
        '/v1/plans/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PlansPost operation.
     * @callback module:api/PlanApi~v1PlansPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new Plan
     * Create a new Plan.
     * @param {module:api/PlanApi~v1PlansPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanPlan}
     */
    v1PlansPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlanPlan;
      return this.apiClient.callApi(
        '/v1/plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
