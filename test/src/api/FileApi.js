/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileFile from '../model/FileFile';

/**
* File service.
* @module api/FileApi
* @version 2.0
*/
export default class FileApi {

    /**
    * Constructs a new FileApi. 
    * @alias module:api/FileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1FilesGet operation.
     * @callback module:api/FileApi~v1FilesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing Files
     * Get all existing Files.
     * @param {module:api/FileApi~v1FilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileFile>}
     */
    v1FilesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileFile];
      return this.apiClient.callApi(
        '/v1/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1FilesIdDelete operation.
     * @callback module:api/FileApi~v1FilesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete File by given ID
     * Delete File by given ID.
     * @param {String} id File ID
     * @param {module:api/FileApi~v1FilesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1FilesIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1FilesIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/files/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1FilesIdGet operation.
     * @callback module:api/FileApi~v1FilesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get File by given ID or 404 error.
     * Get File by given ID or 404 error.
     * @param {String} id File ID
     * @param {module:api/FileApi~v1FilesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileFile}
     */
    v1FilesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1FilesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileFile;
      return this.apiClient.callApi(
        '/v1/files/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1FilesIdPost operation.
     * @callback module:api/FileApi~v1FilesIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update File
     * Update File.
     * @param {String} id File ID
     * @param {module:api/FileApi~v1FilesIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileFile}
     */
    v1FilesIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1FilesIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileFile;
      return this.apiClient.callApi(
        '/v1/files/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1FilesPost operation.
     * @callback module:api/FileApi~v1FilesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new File
     * Create a new File.
     * @param {module:api/FileApi~v1FilesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileFile}
     */
    v1FilesPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileFile;
      return this.apiClient.callApi(
        '/v1/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
