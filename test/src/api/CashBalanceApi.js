/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CashCashBalance from '../model/CashCashBalance';

/**
* CashBalance service.
* @module api/CashBalanceApi
* @version 2.0
*/
export default class CashBalanceApi {

    /**
    * Constructs a new CashBalanceApi. 
    * @alias module:api/CashBalanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1CustomersIdCashBalanceGet operation.
     * @callback module:api/CashBalanceApi~v1CustomersIdCashBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CashCashBalance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing CashBalances
     * Get all existing CashBalances.
     * @param {String} id CashBalance ID
     * @param {String} customerId Customer ID
     * @param {module:api/CashBalanceApi~v1CustomersIdCashBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CashCashBalance>}
     */
    v1CustomersIdCashBalanceGet(id, customerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CustomersIdCashBalanceGet");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling v1CustomersIdCashBalanceGet");
      }

      let pathParams = {
        'id': id,
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CashCashBalance];
      return this.apiClient.callApi(
        '/v1/customers/{id}/cash_balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CustomersIdCashBalanceIdDelete operation.
     * @callback module:api/CashBalanceApi~v1CustomersIdCashBalanceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete CashBalance by given ID
     * Delete CashBalance by given ID.
     * @param {String} id CashBalance ID
     * @param {String} customerId Customer ID
     * @param {module:api/CashBalanceApi~v1CustomersIdCashBalanceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1CustomersIdCashBalanceIdDelete(id, customerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CustomersIdCashBalanceIdDelete");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling v1CustomersIdCashBalanceIdDelete");
      }

      let pathParams = {
        'id': id,
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/customers/{id}/cash_balance/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CustomersIdCashBalanceIdGet operation.
     * @callback module:api/CashBalanceApi~v1CustomersIdCashBalanceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CashCashBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get CashBalance by given ID or 404 error.
     * Get CashBalance by given ID or 404 error.
     * @param {String} id CashBalance ID
     * @param {String} customerId Customer ID
     * @param {module:api/CashBalanceApi~v1CustomersIdCashBalanceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CashCashBalance}
     */
    v1CustomersIdCashBalanceIdGet(id, customerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CustomersIdCashBalanceIdGet");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling v1CustomersIdCashBalanceIdGet");
      }

      let pathParams = {
        'id': id,
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CashCashBalance;
      return this.apiClient.callApi(
        '/v1/customers/{id}/cash_balance/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CustomersIdCashBalanceIdPost operation.
     * @callback module:api/CashBalanceApi~v1CustomersIdCashBalanceIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CashCashBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update CashBalance
     * Update CashBalance.
     * @param {String} id CashBalance ID
     * @param {String} customerId Customer ID
     * @param {module:api/CashBalanceApi~v1CustomersIdCashBalanceIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CashCashBalance}
     */
    v1CustomersIdCashBalanceIdPost(id, customerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1CustomersIdCashBalanceIdPost");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling v1CustomersIdCashBalanceIdPost");
      }

      let pathParams = {
        'id': id,
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CashCashBalance;
      return this.apiClient.callApi(
        '/v1/customers/{id}/cash_balance/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CustomersIdCashBalancePost operation.
     * @callback module:api/CashBalanceApi~v1CustomersIdCashBalancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CashCashBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new CashBalance
     * Create a new CashBalance.
     * @param {module:api/CashBalanceApi~v1CustomersIdCashBalancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CashCashBalance}
     */
    v1CustomersIdCashBalancePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CashCashBalance;
      return this.apiClient.callApi(
        '/v1/customers/{id}/cash_balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
