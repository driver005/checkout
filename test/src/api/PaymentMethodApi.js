/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MethodPaymentMethod from '../model/MethodPaymentMethod';

/**
* PaymentMethod service.
* @module api/PaymentMethodApi
* @version 2.0
*/
export default class PaymentMethodApi {

    /**
    * Constructs a new PaymentMethodApi. 
    * @alias module:api/PaymentMethodApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1PaymentMethodsGet operation.
     * @callback module:api/PaymentMethodApi~v1PaymentMethodsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MethodPaymentMethod>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing PaymentMethods
     * Get all existing PaymentMethods.
     * @param {module:api/PaymentMethodApi~v1PaymentMethodsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MethodPaymentMethod>}
     */
    v1PaymentMethodsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MethodPaymentMethod];
      return this.apiClient.callApi(
        '/v1/payment_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentMethodsIdAttachPost operation.
     * @callback module:api/PaymentMethodApi~v1PaymentMethodsIdAttachPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * attaching PaymentMethod to Customer by given ID
     * Attaching PaymentMethod to Customer by given ID.
     * @param {String} id PaymentMethod ID
     * @param {module:api/PaymentMethodApi~v1PaymentMethodsIdAttachPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1PaymentMethodsIdAttachPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PaymentMethodsIdAttachPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/payment_methods/{id}/attach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentMethodsIdDelete operation.
     * @callback module:api/PaymentMethodApi~v1PaymentMethodsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete PaymentMethod by given ID
     * Delete PaymentMethod by given ID.
     * @param {String} id PaymentMethod ID
     * @param {module:api/PaymentMethodApi~v1PaymentMethodsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1PaymentMethodsIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PaymentMethodsIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/payment_methods/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentMethodsIdDettachPost operation.
     * @callback module:api/PaymentMethodApi~v1PaymentMethodsIdDettachPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * dettaching PaymentMethod from Customer by given ID
     * dettaching PaymentMethod from Customer by given ID.
     * @param {String} id PaymentMethod ID
     * @param {module:api/PaymentMethodApi~v1PaymentMethodsIdDettachPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1PaymentMethodsIdDettachPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PaymentMethodsIdDettachPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/payment_methods/{id}/dettach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentMethodsIdGet operation.
     * @callback module:api/PaymentMethodApi~v1PaymentMethodsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodPaymentMethod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get PaymentMethod by given ID or 404 error.
     * Get PaymentMethod by given ID or 404 error.
     * @param {String} id PaymentMethod ID
     * @param {module:api/PaymentMethodApi~v1PaymentMethodsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodPaymentMethod}
     */
    v1PaymentMethodsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PaymentMethodsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MethodPaymentMethod;
      return this.apiClient.callApi(
        '/v1/payment_methods/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentMethodsIdPost operation.
     * @callback module:api/PaymentMethodApi~v1PaymentMethodsIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodPaymentMethod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update PaymentMethod
     * Update PaymentMethod.
     * @param {String} id PaymentMethod ID
     * @param {module:api/PaymentMethodApi~v1PaymentMethodsIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodPaymentMethod}
     */
    v1PaymentMethodsIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PaymentMethodsIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MethodPaymentMethod;
      return this.apiClient.callApi(
        '/v1/payment_methods/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PaymentMethodsPost operation.
     * @callback module:api/PaymentMethodApi~v1PaymentMethodsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodPaymentMethod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new PaymentMethod
     * Create a new PaymentMethod.
     * @param {module:api/PaymentMethodApi~v1PaymentMethodsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodPaymentMethod}
     */
    v1PaymentMethodsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MethodPaymentMethod;
      return this.apiClient.callApi(
        '/v1/payment_methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
