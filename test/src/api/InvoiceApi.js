/**
 * Fiber Swagger Example API
 * This is a sample server server.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InvoiceInvoice from '../model/InvoiceInvoice';

/**
* Invoice service.
* @module api/InvoiceApi
* @version 2.0
*/
export default class InvoiceApi {

    /**
    * Constructs a new InvoiceApi. 
    * @alias module:api/InvoiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1InvoicesGet operation.
     * @callback module:api/InvoiceApi~v1InvoicesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceInvoice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all existing Invoices
     * Get all existing Invoices.
     * @param {module:api/InvoiceApi~v1InvoicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceInvoice>}
     */
    v1InvoicesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InvoiceInvoice];
      return this.apiClient.callApi(
        '/v1/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdCancelPost operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdCancelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancel Invoice
     * Cancel Invoice.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdCancelPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdCancelPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdCapturePost operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdCapturePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * capture Invoice
     * Capture Invoice.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdCapturePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdCapturePost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdCapturePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}/capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdDelete operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete Invoice by given ID
     * Delete Invoice by given ID.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1InvoicesIdDelete(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/invoices/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdFinalizePost operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdFinalizePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * finalize Invoice
     * Finalize Invoice.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdFinalizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdFinalizePost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdFinalizePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}/finalize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdGet operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Invoice by given ID or 404 error.
     * Get Invoice by given ID or 404 error.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdMarkUncollectiblePost operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdMarkUncollectiblePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * mark Invoice as uncollectible
     * Mark Invoice as uncollectible.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdMarkUncollectiblePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdMarkUncollectiblePost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdMarkUncollectiblePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}/mark_uncollectible', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdPayPost operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdPayPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pay Invoice
     * Pay Invoice.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdPayPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdPayPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdPayPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}/pay', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdPost operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update Invoice
     * Update Invoice.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdSendPost operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send Invoice
     * Send Invoice.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdSendPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdSendPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdUpcomingPost operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdUpcomingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * upcoming Invoice
     * Upcoming Invoice.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdUpcomingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdUpcomingPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdUpcomingPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}/upcoming', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesIdVoidPost operation.
     * @callback module:api/InvoiceApi~v1InvoicesIdVoidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * void Invoice
     * Void Invoice.
     * @param {String} id Invoice ID
     * @param {module:api/InvoiceApi~v1InvoicesIdVoidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesIdVoidPost(id, callback) {
      let postBody = id;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1InvoicesIdVoidPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices/{id}/void', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1InvoicesPost operation.
     * @callback module:api/InvoiceApi~v1InvoicesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new Invoice
     * Create a new Invoice.
     * @param {module:api/InvoiceApi~v1InvoicesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceInvoice}
     */
    v1InvoicesPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceInvoice;
      return this.apiClient.callApi(
        '/v1/invoices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
